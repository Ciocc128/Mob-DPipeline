#%%
from mobgap.data import GenericMobilisedDataset
import numpy as np
from scipy.spatial.transform import Rotation as R
from gaitmap.utils.rotations import rotate_dataset
import matplotlib.pyplot as plt

def unit(vector):
    """ Normalize a vector to unit length. """
    return vector / np.linalg.norm(vector)

def calc_R(acc_data):
    """
    Calculate the rotation matrix to align the accelerometer data with the gravity vector.
    
    Parameters:
        acc_data (np.ndarray): An N x 3 array of accelerometer data.
    
    Returns:
        np.ndarray: The rotation matrix (3x3).
    """
    gravity_local_ideal = np.array([1, 0, 0])  # Ideal gravity vector
    gravity_local_real = unit(np.mean(acc_data[:300], axis=0))  # Use the first 3 seconds (300 samples at 100 Hz)
    print(f"Real gravity vector: {gravity_local_real}")
    angle = np.degrees(np.arccos(np.clip(np.dot(gravity_local_real, gravity_local_ideal), -1.0, 1.0)))
    rotation_axis = unit(np.cross(gravity_local_real, gravity_local_ideal))
    half_angle_rad = np.radians(angle / 2)
    q = np.hstack(([np.cos(half_angle_rad)], rotation_axis * np.sin(half_angle_rad)))
    rotation_matrix = R.from_quat(q).as_matrix()
    return rotation_matrix

def rotate_with_gaitmap(data, rotation_matrix):
    """
    Rotate the accelerometer and gyroscope data using the gaitmap rotation utility.
    
    Parameters:
        data (pd.DataFrame): DataFrame containing accelerometer and gyroscope data.
        rotation_matrix (np.ndarray): A 3x3 rotation matrix.
    
    Returns:
        pd.DataFrame: The rotated data.
    """
    rotation = R.from_matrix(rotation_matrix)  # Create a Rotation object

    # Ensure the DataFrame has all required columns
    if not all(col in data.columns for col in ['acc_x', 'acc_y', 'acc_z', 'gyr_x', 'gyr_y', 'gyr_z']):
        raise ValueError("DataFrame must contain 'acc_x', 'acc_y', 'acc_z', 'gyr_x', 'gyr_y', 'gyr_z' columns")

    # Apply the rotation directly to the DataFrame
    rotated_data = rotate_dataset(data, rotation)
    
    return rotated_data

def plot_data(original_data, rotated_data, title_suffix):
    """
    Plot the original and rotated accelerometer data for comparison.
    
    Parameters:
        original_data (pd.DataFrame): Original accelerometer data.
        rotated_data (pd.DataFrame): Rotated accelerometer data.
    """
    fig, axs = plt.subplots(2, 1, figsize=(10, 8))

    # Plot original data
    axs[0].plot(original_data.index, original_data['acc_x'], label='X', color='r')
    axs[0].plot(original_data.index, original_data['acc_y'], label='Y', color='g')
    axs[0].plot(original_data.index, original_data['acc_z'], label='Z', color='b')
    axs[0].set_title(f'Original Accelerometer Data {title_suffix}')
    axs[0].legend(loc='upper right')

    # Plot rotated data
    axs[1].plot(rotated_data.index, rotated_data['acc_x'], label='X', color='r')
    axs[1].plot(rotated_data.index, rotated_data['acc_y'], label='Y', color='g')
    axs[1].plot(rotated_data.index, rotated_data['acc_z'], label='Z', color='b')
    axs[1].set_title(f'Rotated Accelerometer Data {title_suffix}')
    axs[1].legend(loc='upper right')

    plt.xlabel('Sample Index')
    plt.ylabel('Acceleration (m)')
    plt.tight_layout()
    plt.show()

# Lista dei nomi degli esercizi
nameExList = [
    'Static', 'Standing', 'Per01', 'SW_slow_A', 'SW_slow_B', 'SW_slow_C',
    'SW_comf_A', 'SW_comf_B', 'SW_comf_C', 'SW_fast_A', 'SW_fast_B', 'SW_fast_C',
    'RT_A', 'RT_B', 'RT_C'
]

# Esempio di utilizzo
data_path = 'C:/Users/giorg/OneDrive - Politecnico di Torino/Giorgio Trentadue/Acquisizioni/005/In Lab/Results final/data.mat'

# Carica il dataset
mobDataset = GenericMobilisedDataset(
    [data_path],
    test_level_names=["TimeMeasure1", "Test1", "Trial1"],
    reference_system='INDIP',
    measurement_condition='laboratory',
    raw_data_sensor='SU',
    reference_para_level='wb'
)

# Inizia dal terzo elemento del dataset (indice 2)
for i, trial in enumerate(mobDataset):
    if i < 2:  # Salta i primi due elementi (Static e Standing)
        continue

    exercise_name = nameExList[i]  # Ottieni il nome dell'esercizio

    dataset = trial.data_ss  # `dataset` è già un DataFrame

    # Verifica che il DataFrame contenga tutte le colonne necessarie
    required_columns = ['acc_x', 'acc_y', 'acc_z', 'gyr_x', 'gyr_y', 'gyr_z']
    if not all(col in dataset.columns for col in required_columns):
        raise ValueError("DataFrame must contain 'acc_x', 'acc_y', 'acc_z', 'gyr_x', 'gyr_y', 'gyr_z' columns")

    acc_data = dataset[['acc_x', 'acc_y', 'acc_z']].values  # Ottieni i dati di accelerazione (X, Y, Z)
    print(f"Exercise: {exercise_name} - Dati accelerometrici:\n", dataset[['acc_x', 'acc_y', 'acc_z']])

    # Step 1: Calcola la matrice di rotazione per allineare i dati alla gravità (usando solo i primi 3 secondi)
    R_real_ideal_HD = calc_R(acc_data)

    # Step 2: Applica la rotazione per allineare i dati alla gravità
    aligned_df = rotate_with_gaitmap(dataset, R_real_ideal_HD)
    print(f"Exercise: {exercise_name} - Dati accelerometrici allineati:\n", aligned_df[['acc_x', 'acc_y', 'acc_z']])

    # Rotazione aggiuntiva per allineare i dati dello SmartPhone con il sistema di riferimento Mobilise-D
    additional_rotation_matrix = np.array([
        [1, 0, 0],   # X' = X
        [0, -1, 0],   # Y' = -Y
        [0, 0, -1]   # Z' = -Z
    ])

    # Converte la matrice in un oggetto Rotation
    additional_rotation = R.from_matrix(additional_rotation_matrix)

    # Applica la rotazione aggiuntiva utilizzando gaitmap
    final_rotated_df = rotate_with_gaitmap(aligned_df, additional_rotation.as_matrix())
    print(f"Exercise: {exercise_name} - Dati accelerometrici ruotati finali:\n", final_rotated_df[['acc_x', 'acc_y', 'acc_z']]) 

    # Plot the data
    plot_data(dataset[['acc_x', 'acc_y', 'acc_z']], aligned_df[['acc_x', 'acc_y', 'acc_z']], f"(Exercise: {exercise_name})")

    # Se vuoi visualizzare anche i dati del giroscopio, aggiungi plot separati per il giroscopio
    #plot_data(dataset[['gyr_x', 'gyr_y', 'gyr_z']], final_rotated_df[['gyr_x', 'gyr_y', 'gyr_z']], f"(Gyroscope Exercise: {exercise_name})")


# %%
